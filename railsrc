# .railsrc for Rails 3, encoding: utf-8
#   see http://rbjl.net/49-railsrc-rails-console-snippets

if !Rails.application then warn "Rails isn't loaded, yet... skipping .railsrc" else

#  so, look at actionpack/lib/action_view/helpers.rb and choose the helpers you need
# include ActionView::Helpers::DebugHelper
# include ActionView::Helpers::NumberHelper
# include ActionView::Helpers::RawOutputHelper
# include ActionView::Helpers::SanitizeHelper
# include ActionView::Helpers::TagHelper
# include ActionView::Helpers::TextHelper
# include ActionView::Helpers::TranslationHelper

app_name = Rails.application.class.parent_name.downcase
app_env  = Rails.env[0...3]
IRB.conf[:PROMPT] ||= {}
IRB.conf[:PROMPT][:RAILS] = {
  :PROMPT_I => "#{ app_name }(#{ app_env })> ",
  :PROMPT_N => "#{ app_name }(#{ app_env })| ",
  :PROMPT_C => "#{ app_name }(#{ app_env })| ",
  :PROMPT_S => "#{ app_name }(#{ app_env })%l ",
  :RETURN => "=> %s\n",
  :AUTO_INDENT => true,
}
IRB.conf[:PROMPT_MODE] = :RAILS


def r 
  ActionController::Routing::Routes
end

def sql(query)
  ActiveRecord::Base.connection.select_all(query)
end

Dir.glob( File.join(Dir.pwd, *%w<app models ** *.rb>) ).map { |file_name|
  table_name = File.basename(file_name).split('.')[0..-2].join
  Object.instance_eval do
    define_method(table_name) do |*args|
      table_class = table_name.camelize.constantize
      if args.empty?
        table_class
      else
        table_class.send(:find, *args)
      end
    end
  end
}
end # if Rails.application